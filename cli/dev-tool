#!/usr/bin/python3

import sys
import os
import http.client
import json
import hashlib

args = sys.argv[1:]
# @todo: support mainnet
DAPP_URL = "https://sdk-toolkit-dev.blocto.app"
DEV_DAPP_ID = "5d35c67e-7f37-4e4c-81ba-e7fafc92fd0a"

# @todo: support mainnet contract addresses
EVM_ADDRESSES = {
  'ethereum': '0xe4500382e9e060925Eb9f60Ede902E9098F426d7',
  'bsc': '0x3CC26344Aa3f2d12005f68CAc01EDaf0840e98F3',
  'polygon': '0xDC5Fd9220511A7211719dD8206Ec2D686054bCC0',
  'avalanche': '0xDC5Fd9220511A7211719dD8206Ec2D686054bCC0',
}
EVM_CHAINS = ['ethereum', 'polygon', 'tron', 'bsc', 'avalanche'] 

CODE_ERROR="""
  auth code not found

  to set the auth code, run:
    export WALLET_DEV_CODE="your auth code"
"""
HELP_MESSAGE = """
  transaction

    EVM
    
      dev-tool [blockchain] transfer [address] [value]
      dev-tool [blockchain] setValue [value]

  sign message

    dev-tool [evm-chains] sign [message] ([method])

  help

    dev-tool help
"""

def init_connection():
  try:
    server = os.environ['WALLET_DEV_SERVER'] 
  except:
    server = "wallet-dev.blocto.app"
  connection = http.client.HTTPSConnection(server)
  return connection

def get_code():
  code = os.environ['WALLET_DEV_CODE']
  if code == "":
    print(CODE_ERROR)
    code = None
  return code

def get_dev_url():
  try:
    server = os.environ['WALLET_DEV_URL'] 
  except:
    server = "http://localhost:3000"
  return server

def format_evm_params(params, types):
  data = ""
  for i in range(0, len(params)):
    if str(types[i]).startswith("uint"):
      data += hex(int(params[i]))[2:].zfill(32)
  return data

def make_evm_payload(blockchain, payload, account):
  payload['from'] = account
  payload['maxFeePerGas'] = "0x9502f90e"
  payload['maxPriorityFeePerGas'] = "0x9502F900"
  payload['value'] = args[3] if len(args) > 3 else "0"

  method = args[1] if len(args) > 1 else ""

  if method == "transfer":
    payload['to'] = args[2]
    return
  if method == "setValue":
    signature = "0x55241077"
    value = hex(int(args[2]))[2:].zfill(64)
    payload['data'] = "{signature}{value}".format(signature=signature, value=value)
    payload['to'] = EVM_ADDRESSES[blockchain]

def __main__():

  if len(args) > 1:
    blockchain = args[0]
    op = args[1]
  else:
    op = args[0]

  if op == "sign":
    code = get_code() 
    if code is None: return
    dev_url = get_dev_url()

    try:
      connection = init_connection()
      url = "/api/{blockchain}/user-signature".format(blockchain=blockchain)

      payload = { 'sessionId': code }

      # @todo: support other chains

      if blockchain in EVM_CHAINS:
        payload['message'] = args[2]
        payload['method'] = args[3] if len(args) > 3 else "eth_sign"

      request_body = json.dumps(payload)

      connection.request('POST', url, request_body, { 'Content-type': 'application/json' })

      response = json.load(connection.getresponse())
      signature_id = response['signatureId']
      generated_url = "{dev_url}/{dapp_id}/{blockchain}/user-signature/{signature_id}".format(dev_url=dev_url, dapp_id=DEV_DAPP_ID, blockchain=blockchain, signature_id=signature_id)
      os.system('open "{url}"'.format(url = generated_url))

    except IndexError:
      print("\nError: arguments format")
      print(HELP_MESSAGE)
    except Exception as e:
      print("Error: {}".format(e))

  elif op == "help":
    print(HELP_MESSAGE)
  else:
    # handle transaction
    code = get_code() 
    if code is None: return
    dev_url = get_dev_url()

    try:
      connection = init_connection()
      accounts_url = "/api/{blockchain}/accounts?code={code}".format(blockchain=blockchain, code=code)

      connection.request('GET', accounts_url, None, { 'Content-type': 'application/json', 'referer': DAPP_URL })
      response = json.load(connection.getresponse())
      account = response['accounts'][0]

      payload = { 'sessionId': code }
      
      # @todo: support other chains
      
      if blockchain in EVM_CHAINS:
        make_evm_payload(blockchain, payload, account)

      request_body=json.dumps([payload])

      url = "/api/{blockchain}/authz?code={code}".format(blockchain=blockchain, code=code)
      connection.request('POST', url, request_body, { 'Content-type': 'application/json', 'referer': DAPP_URL })

      response = json.load(connection.getresponse())
      auth_id = response['authorizationId']
      generated_url = "{dev_url}/{dapp_id}/{blockchain}/authz/{auth_id}".format(dev_url=dev_url, dapp_id=DEV_DAPP_ID, blockchain=blockchain, auth_id=auth_id)
      os.system('open "{url}"'.format(url = generated_url))

    except IndexError:
      print("\nError: arguments format")
      print(HELP_MESSAGE)
    except Exception as e:
      print("Error: {}".format(e))

__main__()